// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from interface_nullity.djinni

use support_lib::support::JType;
use support_lib::jni_ffi::{JNIEnv, jobject, jclass};
use generated_rust_jni;
impl JType for Arc<Box<NullityInterface>> {
    type JniType = jobject;

    fn to_rust(jni_env: *mut JNIEnv, j: Self::JniType) -> Self {
        Arc::new(Box::new(NullityInterfaceJavaProxy { javaRef: j }))
    }

    fn from_rust(jni_env: *mut JNIEnv, r: Self {
        // TODO(rustgen): this
        0 as jobject
    }

    fn to_rust_boxed(jni_env: *mut JNIEnv, j: jobject) -> Self {
        Self::to_rust(jni_env, j)
    }

    fn from_rust_boxed(jni_env: *mut JNIEnv, r: Self) -> jobject {
        Self::from_rust(jni_env, r)
    }
}

struct NullityInterfaceJavaProxy {
    javaRef: jobject
}

impl NullityInterface for NullityInterfaceJavaProxy {
    fn non_null_parameters(&self, r_p1: Arc<Box<DummyInterface>>, r_p2: Arc<Box<DummyInterface>>) {
        let class = support_lib::support::get_class(jni_env, "com/dropbox/djinni/test/NullityInterface");
        let jmethod = support_lib::support::get_method(jni_env, class, "nonNullParameters", "(Lcom/dropbox/djinni/test/DummyInterface;Lcom/dropbox/djinni/test/DummyInterface;)V");
        // TODO(rustgen): handle local refs correctly
        jni_invoke!(jni_env, CallVoidMethod, self.javaRef, jmethod,
                    Arc::<Box<DummyInterface>>::from_rust(jni_env, r_p1),
                    Arc::<Box<DummyInterface>>::from_rust(jni_env, r_p2));
    }
    fn non_null_return(&self, r_should_return_null: bool) -> Arc<Box<DummyInterface>> {
        let class = support_lib::support::get_class(jni_env, "com/dropbox/djinni/test/NullityInterface");
        let jmethod = support_lib::support::get_method(jni_env, class, "nonNullReturn", "(Z)Lcom/dropbox/djinni/test/DummyInterface;");
        // TODO(rustgen): handle local refs correctly
        let jret = jni_invoke!(jni_env, CallObjectMethod, self.javaRef, jmethod,
                    bool::from_rust(jni_env, r_should_return_null));
        Arc::<Box<DummyInterface>>::to_rust(jni_env, jret)
    }
    fn nullable_parameters(&self, r_p1: Option<Arc<Box<DummyInterface>>>, r_p2: Option<Arc<Box<DummyInterface>>>) {
        let class = support_lib::support::get_class(jni_env, "com/dropbox/djinni/test/NullityInterface");
        let jmethod = support_lib::support::get_method(jni_env, class, "nullableParameters", "(Lcom/dropbox/djinni/test/DummyInterface;Lcom/dropbox/djinni/test/DummyInterface;)V");
        // TODO(rustgen): handle local refs correctly
        jni_invoke!(jni_env, CallVoidMethod, self.javaRef, jmethod,
                    Option::<Arc<Box<DummyInterface>>>::from_rust(jni_env, r_p1),
                    Option::<Arc<Box<DummyInterface>>>::from_rust(jni_env, r_p2));
    }
    fn nullable_return(&self, r_should_return_null: bool) -> Option<Arc<Box<DummyInterface>>> {
        let class = support_lib::support::get_class(jni_env, "com/dropbox/djinni/test/NullityInterface");
        let jmethod = support_lib::support::get_method(jni_env, class, "nullableReturn", "(Z)Lcom/dropbox/djinni/test/DummyInterface;");
        // TODO(rustgen): handle local refs correctly
        let jret = jni_invoke!(jni_env, CallObjectMethod, self.javaRef, jmethod,
                    bool::from_rust(jni_env, r_should_return_null));
        Option::<Arc<Box<DummyInterface>>>::to_rust(jni_env, jret)
    }
}
