// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from set.djinni

#[macro_use]
use support_lib;
use support_lib::support::JType;
use support_lib::jni_ffi::{JNIEnv, jobject};
use generated_rust::set_record::SetRecord;

pub struct NativeSetRecord;
impl JType for NativeSetRecord
{
    type RustType = SetRecord;
    type JniType = jobject;

    #[allow(non_snake_case)]
    fn to_rust(jni_env: *mut JNIEnv, j: Self::JniType) -> Self::RustType {
        // TODO(rustgen): have a local scope here
        // TODO(rustgen): use a helper to get the class/methods so they're cached
        let class = support_lib::support::get_class(jni_env, "com/dropbox/djinni/test/SetRecord");
        let field_mSet = support_lib::support::get_method(jni_env, class, "mSet", "Ljava/util/HashSet;");
        let field_mIset = support_lib::support::get_method(jni_env, class, "mIset", "Ljava/util/HashSet;");

        assert!(j != 0 as jobject);
        SetRecord {
            set: support_lib::support::Set::<support_lib::support::String>::to_rust(jni_env, jni_invoke!(jni_env, GetObjectField, j, field_mSet)),
            iset: support_lib::support::Set::<support_lib::support::I32>::to_rust(jni_env, jni_invoke!(jni_env, GetObjectField, j, field_mIset)),
        }
    }

    fn from_rust(jni_env: *mut JNIEnv, r: Self::RustType) -> Self::JniType {
        // TODO(rustgen): translate backwards
        0 as jobject
    }

    fn to_rust_boxed(jni_env: *mut JNIEnv, j: jobject) -> Self::RustType {
        Self::to_rust(jni_env, j)
    }

    fn from_rust_boxed(jni_env: *mut JNIEnv, r: Self::RustType) -> jobject {
        Self::from_rust(jni_env, r)
    }
}
