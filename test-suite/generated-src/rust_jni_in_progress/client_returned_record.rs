// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from client_interface.djinni

#[macro_use(jni_invoke)]
use support_lib;
use support_lib::support::{JType, ForVaridaic};
use support_lib::jni_ffi::{JNIEnv, jobject};
use generated_rust::client_returned_record::ClientReturnedRecord;

pub struct NativeClientReturnedRecord;
impl JType for NativeClientReturnedRecord
{
    type RustType = ClientReturnedRecord;
    type JniType = jobject;

    fn to_rust(jni_env: *mut JNIEnv, j: Self::JniType) -> Self::RustType {
        // TODO(rustgen): have a local scope here
        // TODO(rustgen): use a helper to get the class/methods so they're cached
        let class = support_lib::support::get_class(jni_env, "com/dropbox/djinni/test/ClientReturnedRecord");
        let field_record_id = support_lib::support::get_method(jni_env, class, "mRecordId", "J");
        let field_content = support_lib::support::get_method(jni_env, class, "mContent", "Ljava/lang/String;");
        let field_misc = support_lib::support::get_method(jni_env, class, "mMisc", "Ljava/lang/String;");

        assert!(j != 0 as jobject);
        ClientReturnedRecord {
            record_id: support_lib::support::I64::to_rust(jni_env, jni_invoke!(jni_env, GetLongField, j, field_record_id)),
            content: support_lib::support::String::to_rust(jni_env, (jstring)jni_invoke!(jni_env, GetObjectField, j, field_content)),
            misc: support_lib::support::Optional::<support_lib::support::String>::to_rust(jni_env, (jstring)jni_invoke!(jni_env, GetObjectField, j, field_misc)),
        }
    }

    fn from_rust(jni_env: *mut JNIEnv, r: Self::RustType) -> Self::JniType {
        // TODO(rustgen): cache the class/methods
        // TODO(rustgen): class object should have a ref around it
        let class = support_lib::support::get_class(jni_env, "com/dropbox/djinni/test/ClientReturnedRecord");
        let jconstructor = support_lib::support::get_method(jni_env, class, "<init>", "(JLjava/lang/String;Ljava/lang/String;)V");

        // TODO(rustgen): handle local refs correctly
        jni_invoke!(jni_env, NewLocalRef, jni_invoke!(jni_env, NewObject, class, jconstructor,
                                                      support_lib::support::I64::from_rust(jni_env, r.record_id).for_variadic(),
                                                      support_lib::support::String::from_rust(jni_env, r.content).for_variadic(),
                                                      support_lib::support::Optional::<support_lib::support::String>::from_rust(jni_env, r.misc).for_variadic()))
    }

    fn to_rust_boxed(jni_env: *mut JNIEnv, j: jobject) -> Self::RustType {
        Self::to_rust(jni_env, j)
    }

    fn from_rust_boxed(jni_env: *mut JNIEnv, r: Self::RustType) -> jobject {
        Self::from_rust(jni_env, r)
    }
}
