// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from test.djinni

use generated_rust::color::Color;
use generated_rust::nullity_interface::NullityInterface;
use generated_rust::primitive_list::PrimitiveList;
use support_lib::support::jni_get_thread_env;
use generated_rust::map_list_record::MapListRecord;
use support_lib::support::get_class;
use support_lib::support::get_field;
use support_lib::jni_ffi::jobject;
use generated_rust_jni;
use support_lib::jni_ffi::jboolean;
use support_lib::support::ForVariadic;
use std::sync::Arc;
use std::boxed::Box;
use support_lib::support::RustProxyable;
use support_lib::support::JType;
use std::collections::HashMap;
use support_lib::support::get_method;
use support_lib::jni_ffi::JNIEnv;
use support_lib::jni_ffi::jstring;
use support_lib::support::GlobalRef;
use generated_rust::test_helpers::TestHelpers;
use support_lib::jni_ffi::jclass;
use generated_rust::nested_collection::NestedCollection;
use support_lib::jni_ffi::jlong;
use generated_rust::set_record::SetRecord;
use generated_rust::user_token::UserToken;
use std::mem;
use generated_rust::assorted_primitives::AssortedPrimitives;
use generated_rust::client_interface::ClientInterface;

/*
pub fn get_set_record() -> SetRecord {

}

pub fn check_set_record(rec: SetRecord) -> bool {

}

pub fn get_primitive_list() -> PrimitiveList {

}

pub fn check_primitive_list(pl: PrimitiveList) -> bool {

}

pub fn get_nested_collection() -> NestedCollection {

}

pub fn check_nested_collection(nc: NestedCollection) -> bool {

}

pub fn get_map() -> HashMap<String, i64> {

}

pub fn check_map(m: HashMap<String, i64>) -> bool {

}

pub fn get_empty_map() -> HashMap<String, i64> {

}

pub fn check_empty_map(m: HashMap<String, i64>) -> bool {

}

pub fn get_map_list_record() -> MapListRecord {

}

pub fn check_map_list_record(m: MapListRecord) -> bool {

}

pub fn check_client_interface_ascii(i: Arc<Box<ClientInterface>>) {

}

pub fn check_client_interface_nonascii(i: Arc<Box<ClientInterface>>) {

}

pub fn check_enum_map(m: HashMap<Color, String>) {

}

pub fn check_enum(c: Color) {

}

pub fn token_id(t: Option<Arc<Box<UserToken>>>) -> Option<Arc<Box<UserToken>>> {

}

pub fn create_cpp_token() -> Arc<Box<UserToken>> {

}

pub fn check_cpp_token(t: Arc<Box<UserToken>>) {

}

pub fn cpp_token_id(t: Arc<Box<UserToken>>) -> i64 {

}

pub fn check_token_type(t: Arc<Box<UserToken>>, expected_type: String) -> bool {

}

pub fn return_none() -> Option<i32> {

}

pub fn assorted_primitives_id(i: AssortedPrimitives) -> AssortedPrimitives {

}

pub fn get_nullity_interface() -> Arc<Box<NullityInterface>> {

}

pub fn check_interface_nullity_parameters(i: Arc<Box<NullityInterface>>) {

}

pub fn check_interface_nullity_return(i: Arc<Box<NullityInterface>>) {

}

*/

#[no_mangle]
#[inline(never)]
#[allow(non_snake_case)]
pub extern "C" fn Java_com_dropbox_djinni_test_TestHelpers_getSetRecord(jni_env: *mut JNIEnv, _class: jclass) -> jobject {
    let r = ::test_helpers::get_set_record();
    SetRecord::from_rust(jni_env, r)
}

#[no_mangle]
#[inline(never)]
#[allow(non_snake_case)]
pub extern "C" fn Java_com_dropbox_djinni_test_TestHelpers_checkSetRecord(jni_env: *mut JNIEnv, _class: jclass, j_rec: jobject) -> jboolean {
    let r = ::test_helpers::check_set_record(SetRecord::to_rust(jni_env, j_rec));
    bool::from_rust(jni_env, r)
}

#[no_mangle]
#[inline(never)]
#[allow(non_snake_case)]
pub extern "C" fn Java_com_dropbox_djinni_test_TestHelpers_getPrimitiveList(jni_env: *mut JNIEnv, _class: jclass) -> jobject {
    let r = ::test_helpers::get_primitive_list();
    PrimitiveList::from_rust(jni_env, r)
}

#[no_mangle]
#[inline(never)]
#[allow(non_snake_case)]
pub extern "C" fn Java_com_dropbox_djinni_test_TestHelpers_checkPrimitiveList(jni_env: *mut JNIEnv, _class: jclass, j_pl: jobject) -> jboolean {
    let r = ::test_helpers::check_primitive_list(PrimitiveList::to_rust(jni_env, j_pl));
    bool::from_rust(jni_env, r)
}

#[no_mangle]
#[inline(never)]
#[allow(non_snake_case)]
pub extern "C" fn Java_com_dropbox_djinni_test_TestHelpers_getNestedCollection(jni_env: *mut JNIEnv, _class: jclass) -> jobject {
    let r = ::test_helpers::get_nested_collection();
    NestedCollection::from_rust(jni_env, r)
}

#[no_mangle]
#[inline(never)]
#[allow(non_snake_case)]
pub extern "C" fn Java_com_dropbox_djinni_test_TestHelpers_checkNestedCollection(jni_env: *mut JNIEnv, _class: jclass, j_nc: jobject) -> jboolean {
    let r = ::test_helpers::check_nested_collection(NestedCollection::to_rust(jni_env, j_nc));
    bool::from_rust(jni_env, r)
}

#[no_mangle]
#[inline(never)]
#[allow(non_snake_case)]
pub extern "C" fn Java_com_dropbox_djinni_test_TestHelpers_getMap(jni_env: *mut JNIEnv, _class: jclass) -> jobject {
    let r = ::test_helpers::get_map();
    HashMap::<String, i64>::from_rust(jni_env, r)
}

#[no_mangle]
#[inline(never)]
#[allow(non_snake_case)]
pub extern "C" fn Java_com_dropbox_djinni_test_TestHelpers_checkMap(jni_env: *mut JNIEnv, _class: jclass, j_m: jobject) -> jboolean {
    let r = ::test_helpers::check_map(HashMap::<String, i64>::to_rust(jni_env, j_m));
    bool::from_rust(jni_env, r)
}

#[no_mangle]
#[inline(never)]
#[allow(non_snake_case)]
pub extern "C" fn Java_com_dropbox_djinni_test_TestHelpers_getEmptyMap(jni_env: *mut JNIEnv, _class: jclass) -> jobject {
    let r = ::test_helpers::get_empty_map();
    HashMap::<String, i64>::from_rust(jni_env, r)
}

#[no_mangle]
#[inline(never)]
#[allow(non_snake_case)]
pub extern "C" fn Java_com_dropbox_djinni_test_TestHelpers_checkEmptyMap(jni_env: *mut JNIEnv, _class: jclass, j_m: jobject) -> jboolean {
    let r = ::test_helpers::check_empty_map(HashMap::<String, i64>::to_rust(jni_env, j_m));
    bool::from_rust(jni_env, r)
}

#[no_mangle]
#[inline(never)]
#[allow(non_snake_case)]
pub extern "C" fn Java_com_dropbox_djinni_test_TestHelpers_getMapListRecord(jni_env: *mut JNIEnv, _class: jclass) -> jobject {
    let r = ::test_helpers::get_map_list_record();
    MapListRecord::from_rust(jni_env, r)
}

#[no_mangle]
#[inline(never)]
#[allow(non_snake_case)]
pub extern "C" fn Java_com_dropbox_djinni_test_TestHelpers_checkMapListRecord(jni_env: *mut JNIEnv, _class: jclass, j_m: jobject) -> jboolean {
    let r = ::test_helpers::check_map_list_record(MapListRecord::to_rust(jni_env, j_m));
    bool::from_rust(jni_env, r)
}

#[no_mangle]
#[inline(never)]
#[allow(non_snake_case)]
pub extern "C" fn Java_com_dropbox_djinni_test_TestHelpers_checkClientInterfaceAscii(jni_env: *mut JNIEnv, _class: jclass, j_i: jobject) {
    ::test_helpers::check_client_interface_ascii(Arc::<Box<ClientInterface>>::to_rust(jni_env, j_i));
}

#[no_mangle]
#[inline(never)]
#[allow(non_snake_case)]
pub extern "C" fn Java_com_dropbox_djinni_test_TestHelpers_checkClientInterfaceNonascii(jni_env: *mut JNIEnv, _class: jclass, j_i: jobject) {
    ::test_helpers::check_client_interface_nonascii(Arc::<Box<ClientInterface>>::to_rust(jni_env, j_i));
}

#[no_mangle]
#[inline(never)]
#[allow(non_snake_case)]
pub extern "C" fn Java_com_dropbox_djinni_test_TestHelpers_checkEnumMap(jni_env: *mut JNIEnv, _class: jclass, j_m: jobject) {
    ::test_helpers::check_enum_map(HashMap::<Color, String>::to_rust(jni_env, j_m));
}

#[no_mangle]
#[inline(never)]
#[allow(non_snake_case)]
pub extern "C" fn Java_com_dropbox_djinni_test_TestHelpers_checkEnum(jni_env: *mut JNIEnv, _class: jclass, j_c: jobject) {
    ::test_helpers::check_enum(Color::to_rust(jni_env, j_c));
}

#[no_mangle]
#[inline(never)]
#[allow(non_snake_case)]
pub extern "C" fn Java_com_dropbox_djinni_test_TestHelpers_tokenId(jni_env: *mut JNIEnv, _class: jclass, j_t: jobject) -> jobject {
    let r = ::test_helpers::token_id(Option::<Arc<Box<UserToken>>>::to_rust(jni_env, j_t));
    Option::<Arc<Box<UserToken>>>::from_rust(jni_env, r)
}

#[no_mangle]
#[inline(never)]
#[allow(non_snake_case)]
pub extern "C" fn Java_com_dropbox_djinni_test_TestHelpers_createCppToken(jni_env: *mut JNIEnv, _class: jclass) -> jobject {
    let r = ::test_helpers::create_cpp_token();
    Arc::<Box<UserToken>>::from_rust(jni_env, r)
}

#[no_mangle]
#[inline(never)]
#[allow(non_snake_case)]
pub extern "C" fn Java_com_dropbox_djinni_test_TestHelpers_checkCppToken(jni_env: *mut JNIEnv, _class: jclass, j_t: jobject) {
    ::test_helpers::check_cpp_token(Arc::<Box<UserToken>>::to_rust(jni_env, j_t));
}

#[no_mangle]
#[inline(never)]
#[allow(non_snake_case)]
pub extern "C" fn Java_com_dropbox_djinni_test_TestHelpers_cppTokenId(jni_env: *mut JNIEnv, _class: jclass, j_t: jobject) -> jlong {
    let r = ::test_helpers::cpp_token_id(Arc::<Box<UserToken>>::to_rust(jni_env, j_t));
    i64::from_rust(jni_env, r)
}

#[no_mangle]
#[inline(never)]
#[allow(non_snake_case)]
pub extern "C" fn Java_com_dropbox_djinni_test_TestHelpers_checkTokenType(jni_env: *mut JNIEnv, _class: jclass, j_t: jobject, j_expectedType: jstring) -> jboolean {
    let r = ::test_helpers::check_token_type(Arc::<Box<UserToken>>::to_rust(jni_env, j_t),
                                             String::to_rust(jni_env, j_expectedType));
    bool::from_rust(jni_env, r)
}

#[no_mangle]
#[inline(never)]
#[allow(non_snake_case)]
pub extern "C" fn Java_com_dropbox_djinni_test_TestHelpers_returnNone(jni_env: *mut JNIEnv, _class: jclass) -> jobject {
    let r = ::test_helpers::return_none();
    Option::<i32>::from_rust(jni_env, r)
}

#[no_mangle]
#[inline(never)]
#[allow(non_snake_case)]
pub extern "C" fn Java_com_dropbox_djinni_test_TestHelpers_assortedPrimitivesId(jni_env: *mut JNIEnv, _class: jclass, j_i: jobject) -> jobject {
    let r = ::test_helpers::assorted_primitives_id(AssortedPrimitives::to_rust(jni_env, j_i));
    AssortedPrimitives::from_rust(jni_env, r)
}

#[no_mangle]
#[inline(never)]
#[allow(non_snake_case)]
pub extern "C" fn Java_com_dropbox_djinni_test_TestHelpers_getNullityInterface(jni_env: *mut JNIEnv, _class: jclass) -> jobject {
    let r = ::test_helpers::get_nullity_interface();
    Arc::<Box<NullityInterface>>::from_rust(jni_env, r)
}

#[no_mangle]
#[inline(never)]
#[allow(non_snake_case)]
pub extern "C" fn Java_com_dropbox_djinni_test_TestHelpers_checkInterfaceNullityParameters(jni_env: *mut JNIEnv, _class: jclass, j_i: jobject) {
    ::test_helpers::check_interface_nullity_parameters(Arc::<Box<NullityInterface>>::to_rust(jni_env, j_i));
}

#[no_mangle]
#[inline(never)]
#[allow(non_snake_case)]
pub extern "C" fn Java_com_dropbox_djinni_test_TestHelpers_checkInterfaceNullityReturn(jni_env: *mut JNIEnv, _class: jclass, j_i: jobject) {
    ::test_helpers::check_interface_nullity_return(Arc::<Box<NullityInterface>>::to_rust(jni_env, j_i));
}

// TODO(rustgen): correct strong/weak Java references
// TODO(rustgen): cache the proxies
// TODO(rustgen): look into using catch_panic
impl JType for Arc<Box<TestHelpers>> {
    type JniType = jobject;

    fn to_rust(jni_env: *mut JNIEnv, j: Self::JniType) -> Self {
        let proxy_class = get_class(jni_env, "com/dropbox/djinni/test/TestHelpers$CppProxy");
        let object_class = jni_invoke!(jni_env, GetObjectClass, j);
        let is_proxy = bool::to_rust(jni_env, jni_invoke!(jni_env, IsSameObject, proxy_class, object_class));
        assert!(is_proxy);
        let native_ref_field = get_field(jni_env, proxy_class, "nativeRef", "J");
        let handle = jni_invoke!(jni_env, GetLongField, j, native_ref_field);
        *Self::from_handle(handle)
    }

    fn from_rust(jni_env: *mut JNIEnv, r: Self) -> Self::JniType {
        // Is not a Java proxy, need to create a new CppProxy
        // TODO(rustgen) - cache the CppProxys
        let class = ::support_lib::support::get_class(jni_env, "com/dropbox/djinni/test/TestHelpers$CppProxy");
        let constructor = ::support_lib::support::get_method(jni_env, class, "<init>", "(J)V");
        let handle = Self::to_handle(r.clone());
        jni_invoke!(jni_env, NewObject, class, constructor, handle)
    }

    fn to_rust_boxed(jni_env: *mut JNIEnv, j: jobject) -> Self {
        Self::to_rust(jni_env, j)
    }

    fn from_rust_boxed(jni_env: *mut JNIEnv, r: Self) -> jobject {
        Self::from_rust(jni_env, r)
    }
}

impl RustProxyable for Arc<Box<TestHelpers>> {
    fn to_handle(self) -> jlong {
        // Convert our box into a pointer, leaving the memory there and not running
        // the destructor on the contents. We can't use Box::into_raw since it's unstable.
        unsafe { mem::transmute(Box::new(self)) }
    }
    fn from_handle(rust_proxy_handle: jlong) -> Box<Self> {
        // Convert our pointer back into a box. We can't use Box::from_raw since it's unstable.
        unsafe { mem::transmute(rust_proxy_handle as *mut Arc<Box<Self>>) }
    }
}

struct TestHelpersCppProxy {
    rust_ref: Arc<Box<TestHelpers>>
}

#[no_mangle]
#[inline(never)]
#[allow(non_snake_case)]
pub extern "C" fn Java_com_dropbox_djinni_test_TestHelpers_00024CppProxy_nativeDestroy(jni_env: *mut JNIEnv, _this: jobject, native_ref: jlong) {
    let _to_delete: Box<Arc<Box<TestHelpers>>> = Arc::<Box<TestHelpers>>::from_handle(native_ref);
    // Let the destructor run on the Box and its Arc when _to_delete goes out of scope.
}
