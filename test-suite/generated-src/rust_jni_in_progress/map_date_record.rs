// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from date.djinni

#[macro_use(jni_invoke)]
use support_lib;
use support_lib::support::{JType, ForVaridaic};
use support_lib::jni_ffi::{JNIEnv, jobject};
use generated_rust::map_date_record::MapDateRecord;

pub struct NativeMapDateRecord;
impl JType for NativeMapDateRecord
{
    type RustType = MapDateRecord;
    type JniType = jobject;

    fn to_rust(jni_env: *mut JNIEnv, j: Self::JniType) -> Self::RustType {
        // TODO(rustgen): have a local scope here
        // TODO(rustgen): use a helper to get the class/methods so they're cached
        let class = support_lib::support::get_class(jni_env, "com/dropbox/djinni/test/MapDateRecord");
        let field_dates_by_id = support_lib::support::get_method(jni_env, class, "mDatesById", "Ljava/util/HashMap;");

        assert!(j != 0 as jobject);
        MapDateRecord {
            // would grab field_dates_by_id, but MExtern not implemented
        }
    }

    fn from_rust(jni_env: *mut JNIEnv, r: Self::RustType) -> Self::JniType {
        // TODO(rustgen): cache the class/methods
        // TODO(rustgen): class object should have a ref around it
        let class = support_lib::support::get_class(jni_env, "com/dropbox/djinni/test/MapDateRecord");
        let jconstructor = support_lib::support::get_method(jni_env, class, "<init>", "(Ljava/util/HashMap;)V");

        // TODO(rustgen): handle local refs correctly
        jni_invoke!(jni_env, NewLocalRef, jni_invoke!(jni_env, NewObject, class, jconstructor,
                                                      // would grab dates_by_id, but MExtern not implemented))
    }

    fn to_rust_boxed(jni_env: *mut JNIEnv, j: jobject) -> Self::RustType {
        Self::to_rust(jni_env, j)
    }

    fn from_rust_boxed(jni_env: *mut JNIEnv, r: Self::RustType) -> jobject {
        Self::from_rust(jni_env, r)
    }
}
