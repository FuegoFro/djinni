// This is taken from https://github.com/tomaka/android-rs-glue

#![allow(dead_code)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(non_upper_case_globals)]

use libc;

//
//       $generated by android-rs-bindgen
//
pub type __va_list_tag = ();

//
//       jni.h
//
pub type C_JNIEnv = *const JNINativeInterface;
pub type JNIEnv = _JNIEnv;
pub const JNIGlobalRefType: libc::int32_t = 2;
pub const JNIInvalidRefType: libc::int32_t = 0;
#[repr(C)]
pub struct JNIInvokeInterface {
     pub reserved0:             *mut libc::c_void,
     pub reserved1:             *mut libc::c_void,
     pub reserved2:             *mut libc::c_void,
     pub DestroyJavaVM:             extern fn(*mut JavaVM) -> jint,
     pub AttachCurrentThread:               extern fn(*mut JavaVM, *mut *mut JNIEnv, *mut libc::c_void) -> jint,
     pub DetachCurrentThread:               extern fn(*mut JavaVM) -> jint,
     pub GetEnv:                extern fn(*mut JavaVM, *mut *mut libc::c_void, jint) -> jint,
     pub AttachCurrentThreadAsDaemon:               extern fn(*mut JavaVM, *mut *mut JNIEnv, *mut libc::c_void) -> jint,
}
pub const JNILocalRefType: libc::int32_t = 1;
#[repr(C)]
pub struct JNINativeInterface {
     pub reserved0:             *mut libc::c_void,
     pub reserved1:             *mut libc::c_void,
     pub reserved2:             *mut libc::c_void,
     pub reserved3:             *mut libc::c_void,
     pub GetVersion:                extern fn(*mut JNIEnv) -> jint,
     pub DefineClass:               extern fn(*mut JNIEnv, *const libc::c_char, jobject, *const jbyte, jsize) -> jclass,
     pub FindClass:             extern fn(*mut JNIEnv, *const libc::c_char) -> jclass,
     pub FromReflectedMethod:               extern fn(*mut JNIEnv, jobject) -> jmethodID,
     pub FromReflectedField:                extern fn(*mut JNIEnv, jobject) -> jfieldID,
     pub ToReflectedMethod:             extern fn(*mut JNIEnv, jclass, jmethodID, jboolean) -> jobject,
     pub GetSuperclass:             extern fn(*mut JNIEnv, jclass) -> jclass,
     pub IsAssignableFrom:              extern fn(*mut JNIEnv, jclass, jclass) -> jboolean,
     pub ToReflectedField:              extern fn(*mut JNIEnv, jclass, jfieldID, jboolean) -> jobject,
     pub Throw:             extern fn(*mut JNIEnv, jthrowable) -> jint,
     pub ThrowNew:              extern fn(*mut JNIEnv, jclass, *const libc::c_char) -> jint,
     pub ExceptionOccurred:             extern fn(*mut JNIEnv) -> jthrowable,
     pub ExceptionDescribe:             extern fn(*mut JNIEnv),
     pub ExceptionClear:                extern fn(*mut JNIEnv),
     pub FatalError:                extern fn(*mut JNIEnv, *const libc::c_char),
     pub PushLocalFrame:                extern fn(*mut JNIEnv, jint) -> jint,
     pub PopLocalFrame:             extern fn(*mut JNIEnv, jobject) -> jobject,
     pub NewGlobalRef:              extern fn(*mut JNIEnv, jobject) -> jobject,
     pub DeleteGlobalRef:               extern fn(*mut JNIEnv, jobject),
     pub DeleteLocalRef:                extern fn(*mut JNIEnv, jobject),
     pub IsSameObject:              extern fn(*mut JNIEnv, jobject, jobject) -> jboolean,
     pub NewLocalRef:               extern fn(*mut JNIEnv, jobject) -> jobject,
     pub EnsureLocalCapacity:               extern fn(*mut JNIEnv, jint) -> jint,
     pub AllocObject:               extern fn(*mut JNIEnv, jclass) -> jobject,
     pub NewObject:             extern fn(*mut JNIEnv, jclass, jmethodID, ...) -> jobject,
     pub NewObjectV:                extern fn(*mut JNIEnv, jclass, jmethodID, *mut __va_list_tag) -> jobject,
     pub NewObjectA:                extern fn(*mut JNIEnv, jclass, jmethodID, *mut jvalue) -> jobject,
     pub GetObjectClass:                extern fn(*mut JNIEnv, jobject) -> jclass,
     pub IsInstanceOf:              extern fn(*mut JNIEnv, jobject, jclass) -> jboolean,
     pub GetMethodID:               extern fn(*mut JNIEnv, jclass, *const libc::c_char, *const libc::c_char) -> jmethodID,
     pub CallObjectMethod:              extern fn(*mut JNIEnv, jobject, jmethodID, ...) -> jobject,
     pub CallObjectMethodV:             extern fn(*mut JNIEnv, jobject, jmethodID, *mut __va_list_tag) -> jobject,
     pub CallObjectMethodA:             extern fn(*mut JNIEnv, jobject, jmethodID, *mut jvalue) -> jobject,
     pub CallBooleanMethod:             extern fn(*mut JNIEnv, jobject, jmethodID, ...) -> jboolean,
     pub CallBooleanMethodV:                extern fn(*mut JNIEnv, jobject, jmethodID, *mut __va_list_tag) -> jboolean,
     pub CallBooleanMethodA:                extern fn(*mut JNIEnv, jobject, jmethodID, *mut jvalue) -> jboolean,
     pub CallByteMethod:                extern fn(*mut JNIEnv, jobject, jmethodID, ...) -> jbyte,
     pub CallByteMethodV:               extern fn(*mut JNIEnv, jobject, jmethodID, *mut __va_list_tag) -> jbyte,
     pub CallByteMethodA:               extern fn(*mut JNIEnv, jobject, jmethodID, *mut jvalue) -> jbyte,
     pub CallCharMethod:                extern fn(*mut JNIEnv, jobject, jmethodID, ...) -> jchar,
     pub CallCharMethodV:               extern fn(*mut JNIEnv, jobject, jmethodID, *mut __va_list_tag) -> jchar,
     pub CallCharMethodA:               extern fn(*mut JNIEnv, jobject, jmethodID, *mut jvalue) -> jchar,
     pub CallShortMethod:               extern fn(*mut JNIEnv, jobject, jmethodID, ...) -> jshort,
     pub CallShortMethodV:              extern fn(*mut JNIEnv, jobject, jmethodID, *mut __va_list_tag) -> jshort,
     pub CallShortMethodA:              extern fn(*mut JNIEnv, jobject, jmethodID, *mut jvalue) -> jshort,
     pub CallIntMethod:             extern fn(*mut JNIEnv, jobject, jmethodID, ...) -> jint,
     pub CallIntMethodV:                extern fn(*mut JNIEnv, jobject, jmethodID, *mut __va_list_tag) -> jint,
     pub CallIntMethodA:                extern fn(*mut JNIEnv, jobject, jmethodID, *mut jvalue) -> jint,
     pub CallLongMethod:                extern fn(*mut JNIEnv, jobject, jmethodID, ...) -> jlong,
     pub CallLongMethodV:               extern fn(*mut JNIEnv, jobject, jmethodID, *mut __va_list_tag) -> jlong,
     pub CallLongMethodA:               extern fn(*mut JNIEnv, jobject, jmethodID, *mut jvalue) -> jlong,
     pub CallFloatMethod:               extern fn(*mut JNIEnv, jobject, jmethodID, ...) -> jfloat,
     pub CallFloatMethodV:              extern fn(*mut JNIEnv, jobject, jmethodID, *mut __va_list_tag) -> jfloat,
     pub CallFloatMethodA:              extern fn(*mut JNIEnv, jobject, jmethodID, *mut jvalue) -> jfloat,
     pub CallDoubleMethod:              extern fn(*mut JNIEnv, jobject, jmethodID, ...) -> jdouble,
     pub CallDoubleMethodV:             extern fn(*mut JNIEnv, jobject, jmethodID, *mut __va_list_tag) -> jdouble,
     pub CallDoubleMethodA:             extern fn(*mut JNIEnv, jobject, jmethodID, *mut jvalue) -> jdouble,
     pub CallVoidMethod:                extern fn(*mut JNIEnv, jobject, jmethodID, ...),
     pub CallVoidMethodV:               extern fn(*mut JNIEnv, jobject, jmethodID, *mut __va_list_tag),
     pub CallVoidMethodA:               extern fn(*mut JNIEnv, jobject, jmethodID, *mut jvalue),
     pub CallNonvirtualObjectMethod:                extern fn(*mut JNIEnv, jobject, jclass, jmethodID, ...) -> jobject,
     pub CallNonvirtualObjectMethodV:               extern fn(*mut JNIEnv, jobject, jclass, jmethodID, *mut __va_list_tag) -> jobject,
     pub CallNonvirtualObjectMethodA:               extern fn(*mut JNIEnv, jobject, jclass, jmethodID, *mut jvalue) -> jobject,
     pub CallNonvirtualBooleanMethod:               extern fn(*mut JNIEnv, jobject, jclass, jmethodID, ...) -> jboolean,
     pub CallNonvirtualBooleanMethodV:              extern fn(*mut JNIEnv, jobject, jclass, jmethodID, *mut __va_list_tag) -> jboolean,
     pub CallNonvirtualBooleanMethodA:              extern fn(*mut JNIEnv, jobject, jclass, jmethodID, *mut jvalue) -> jboolean,
     pub CallNonvirtualByteMethod:              extern fn(*mut JNIEnv, jobject, jclass, jmethodID, ...) -> jbyte,
     pub CallNonvirtualByteMethodV:             extern fn(*mut JNIEnv, jobject, jclass, jmethodID, *mut __va_list_tag) -> jbyte,
     pub CallNonvirtualByteMethodA:             extern fn(*mut JNIEnv, jobject, jclass, jmethodID, *mut jvalue) -> jbyte,
     pub CallNonvirtualCharMethod:              extern fn(*mut JNIEnv, jobject, jclass, jmethodID, ...) -> jchar,
     pub CallNonvirtualCharMethodV:             extern fn(*mut JNIEnv, jobject, jclass, jmethodID, *mut __va_list_tag) -> jchar,
     pub CallNonvirtualCharMethodA:             extern fn(*mut JNIEnv, jobject, jclass, jmethodID, *mut jvalue) -> jchar,
     pub CallNonvirtualShortMethod:             extern fn(*mut JNIEnv, jobject, jclass, jmethodID, ...) -> jshort,
     pub CallNonvirtualShortMethodV:                extern fn(*mut JNIEnv, jobject, jclass, jmethodID, *mut __va_list_tag) -> jshort,
     pub CallNonvirtualShortMethodA:                extern fn(*mut JNIEnv, jobject, jclass, jmethodID, *mut jvalue) -> jshort,
     pub CallNonvirtualIntMethod:               extern fn(*mut JNIEnv, jobject, jclass, jmethodID, ...) -> jint,
     pub CallNonvirtualIntMethodV:              extern fn(*mut JNIEnv, jobject, jclass, jmethodID, *mut __va_list_tag) -> jint,
     pub CallNonvirtualIntMethodA:              extern fn(*mut JNIEnv, jobject, jclass, jmethodID, *mut jvalue) -> jint,
     pub CallNonvirtualLongMethod:              extern fn(*mut JNIEnv, jobject, jclass, jmethodID, ...) -> jlong,
     pub CallNonvirtualLongMethodV:             extern fn(*mut JNIEnv, jobject, jclass, jmethodID, *mut __va_list_tag) -> jlong,
     pub CallNonvirtualLongMethodA:             extern fn(*mut JNIEnv, jobject, jclass, jmethodID, *mut jvalue) -> jlong,
     pub CallNonvirtualFloatMethod:             extern fn(*mut JNIEnv, jobject, jclass, jmethodID, ...) -> jfloat,
     pub CallNonvirtualFloatMethodV:                extern fn(*mut JNIEnv, jobject, jclass, jmethodID, *mut __va_list_tag) -> jfloat,
     pub CallNonvirtualFloatMethodA:                extern fn(*mut JNIEnv, jobject, jclass, jmethodID, *mut jvalue) -> jfloat,
     pub CallNonvirtualDoubleMethod:                extern fn(*mut JNIEnv, jobject, jclass, jmethodID, ...) -> jdouble,
     pub CallNonvirtualDoubleMethodV:               extern fn(*mut JNIEnv, jobject, jclass, jmethodID, *mut __va_list_tag) -> jdouble,
     pub CallNonvirtualDoubleMethodA:               extern fn(*mut JNIEnv, jobject, jclass, jmethodID, *mut jvalue) -> jdouble,
     pub CallNonvirtualVoidMethod:              extern fn(*mut JNIEnv, jobject, jclass, jmethodID, ...),
     pub CallNonvirtualVoidMethodV:             extern fn(*mut JNIEnv, jobject, jclass, jmethodID, *mut __va_list_tag),
     pub CallNonvirtualVoidMethodA:             extern fn(*mut JNIEnv, jobject, jclass, jmethodID, *mut jvalue),
     pub GetFieldID:                extern fn(*mut JNIEnv, jclass, *const libc::c_char, *const libc::c_char) -> jfieldID,
     pub GetObjectField:                extern fn(*mut JNIEnv, jobject, jfieldID) -> jobject,
     pub GetBooleanField:               extern fn(*mut JNIEnv, jobject, jfieldID) -> jboolean,
     pub GetByteField:              extern fn(*mut JNIEnv, jobject, jfieldID) -> jbyte,
     pub GetCharField:              extern fn(*mut JNIEnv, jobject, jfieldID) -> jchar,
     pub GetShortField:             extern fn(*mut JNIEnv, jobject, jfieldID) -> jshort,
     pub GetIntField:               extern fn(*mut JNIEnv, jobject, jfieldID) -> jint,
     pub GetLongField:              extern fn(*mut JNIEnv, jobject, jfieldID) -> jlong,
     pub GetFloatField:             extern fn(*mut JNIEnv, jobject, jfieldID) -> jfloat,
     pub GetDoubleField:                extern fn(*mut JNIEnv, jobject, jfieldID) -> jdouble,
     pub SetObjectField:                extern fn(*mut JNIEnv, jobject, jfieldID, jobject),
     pub SetBooleanField:               extern fn(*mut JNIEnv, jobject, jfieldID, jboolean),
     pub SetByteField:              extern fn(*mut JNIEnv, jobject, jfieldID, jbyte),
     pub SetCharField:              extern fn(*mut JNIEnv, jobject, jfieldID, jchar),
     pub SetShortField:             extern fn(*mut JNIEnv, jobject, jfieldID, jshort),
     pub SetIntField:               extern fn(*mut JNIEnv, jobject, jfieldID, jint),
     pub SetLongField:              extern fn(*mut JNIEnv, jobject, jfieldID, jlong),
     pub SetFloatField:             extern fn(*mut JNIEnv, jobject, jfieldID, jfloat),
     pub SetDoubleField:                extern fn(*mut JNIEnv, jobject, jfieldID, jdouble),
     pub GetStaticMethodID:             extern fn(*mut JNIEnv, jclass, *const libc::c_char, *const libc::c_char) -> jmethodID,
     pub CallStaticObjectMethod:                extern fn(*mut JNIEnv, jclass, jmethodID, ...) -> jobject,
     pub CallStaticObjectMethodV:               extern fn(*mut JNIEnv, jclass, jmethodID, *mut __va_list_tag) -> jobject,
     pub CallStaticObjectMethodA:               extern fn(*mut JNIEnv, jclass, jmethodID, *mut jvalue) -> jobject,
     pub CallStaticBooleanMethod:               extern fn(*mut JNIEnv, jclass, jmethodID, ...) -> jboolean,
     pub CallStaticBooleanMethodV:              extern fn(*mut JNIEnv, jclass, jmethodID, *mut __va_list_tag) -> jboolean,
     pub CallStaticBooleanMethodA:              extern fn(*mut JNIEnv, jclass, jmethodID, *mut jvalue) -> jboolean,
     pub CallStaticByteMethod:              extern fn(*mut JNIEnv, jclass, jmethodID, ...) -> jbyte,
     pub CallStaticByteMethodV:             extern fn(*mut JNIEnv, jclass, jmethodID, *mut __va_list_tag) -> jbyte,
     pub CallStaticByteMethodA:             extern fn(*mut JNIEnv, jclass, jmethodID, *mut jvalue) -> jbyte,
     pub CallStaticCharMethod:              extern fn(*mut JNIEnv, jclass, jmethodID, ...) -> jchar,
     pub CallStaticCharMethodV:             extern fn(*mut JNIEnv, jclass, jmethodID, *mut __va_list_tag) -> jchar,
     pub CallStaticCharMethodA:             extern fn(*mut JNIEnv, jclass, jmethodID, *mut jvalue) -> jchar,
     pub CallStaticShortMethod:             extern fn(*mut JNIEnv, jclass, jmethodID, ...) -> jshort,
     pub CallStaticShortMethodV:                extern fn(*mut JNIEnv, jclass, jmethodID, *mut __va_list_tag) -> jshort,
     pub CallStaticShortMethodA:                extern fn(*mut JNIEnv, jclass, jmethodID, *mut jvalue) -> jshort,
     pub CallStaticIntMethod:               extern fn(*mut JNIEnv, jclass, jmethodID, ...) -> jint,
     pub CallStaticIntMethodV:              extern fn(*mut JNIEnv, jclass, jmethodID, *mut __va_list_tag) -> jint,
     pub CallStaticIntMethodA:              extern fn(*mut JNIEnv, jclass, jmethodID, *mut jvalue) -> jint,
     pub CallStaticLongMethod:              extern fn(*mut JNIEnv, jclass, jmethodID, ...) -> jlong,
     pub CallStaticLongMethodV:             extern fn(*mut JNIEnv, jclass, jmethodID, *mut __va_list_tag) -> jlong,
     pub CallStaticLongMethodA:             extern fn(*mut JNIEnv, jclass, jmethodID, *mut jvalue) -> jlong,
     pub CallStaticFloatMethod:             extern fn(*mut JNIEnv, jclass, jmethodID, ...) -> jfloat,
     pub CallStaticFloatMethodV:                extern fn(*mut JNIEnv, jclass, jmethodID, *mut __va_list_tag) -> jfloat,
     pub CallStaticFloatMethodA:                extern fn(*mut JNIEnv, jclass, jmethodID, *mut jvalue) -> jfloat,
     pub CallStaticDoubleMethod:                extern fn(*mut JNIEnv, jclass, jmethodID, ...) -> jdouble,
     pub CallStaticDoubleMethodV:               extern fn(*mut JNIEnv, jclass, jmethodID, *mut __va_list_tag) -> jdouble,
     pub CallStaticDoubleMethodA:               extern fn(*mut JNIEnv, jclass, jmethodID, *mut jvalue) -> jdouble,
     pub CallStaticVoidMethod:              extern fn(*mut JNIEnv, jclass, jmethodID, ...),
     pub CallStaticVoidMethodV:             extern fn(*mut JNIEnv, jclass, jmethodID, *mut __va_list_tag),
     pub CallStaticVoidMethodA:             extern fn(*mut JNIEnv, jclass, jmethodID, *mut jvalue),
     pub GetStaticFieldID:              extern fn(*mut JNIEnv, jclass, *const libc::c_char, *const libc::c_char) -> jfieldID,
     pub GetStaticObjectField:              extern fn(*mut JNIEnv, jclass, jfieldID) -> jobject,
     pub GetStaticBooleanField:             extern fn(*mut JNIEnv, jclass, jfieldID) -> jboolean,
     pub GetStaticByteField:                extern fn(*mut JNIEnv, jclass, jfieldID) -> jbyte,
     pub GetStaticCharField:                extern fn(*mut JNIEnv, jclass, jfieldID) -> jchar,
     pub GetStaticShortField:               extern fn(*mut JNIEnv, jclass, jfieldID) -> jshort,
     pub GetStaticIntField:             extern fn(*mut JNIEnv, jclass, jfieldID) -> jint,
     pub GetStaticLongField:                extern fn(*mut JNIEnv, jclass, jfieldID) -> jlong,
     pub GetStaticFloatField:               extern fn(*mut JNIEnv, jclass, jfieldID) -> jfloat,
     pub GetStaticDoubleField:              extern fn(*mut JNIEnv, jclass, jfieldID) -> jdouble,
     pub SetStaticObjectField:              extern fn(*mut JNIEnv, jclass, jfieldID, jobject),
     pub SetStaticBooleanField:             extern fn(*mut JNIEnv, jclass, jfieldID, jboolean),
     pub SetStaticByteField:                extern fn(*mut JNIEnv, jclass, jfieldID, jbyte),
     pub SetStaticCharField:                extern fn(*mut JNIEnv, jclass, jfieldID, jchar),
     pub SetStaticShortField:               extern fn(*mut JNIEnv, jclass, jfieldID, jshort),
     pub SetStaticIntField:             extern fn(*mut JNIEnv, jclass, jfieldID, jint),
     pub SetStaticLongField:                extern fn(*mut JNIEnv, jclass, jfieldID, jlong),
     pub SetStaticFloatField:               extern fn(*mut JNIEnv, jclass, jfieldID, jfloat),
     pub SetStaticDoubleField:              extern fn(*mut JNIEnv, jclass, jfieldID, jdouble),
     pub NewString:             extern fn(*mut JNIEnv, *const jchar, jsize) -> jstring,
     pub GetStringLength:               extern fn(*mut JNIEnv, jstring) -> jsize,
     pub GetStringChars:                extern fn(*mut JNIEnv, jstring, *mut jboolean) -> *const jchar,
     pub ReleaseStringChars:                extern fn(*mut JNIEnv, jstring, *const jchar),
     pub NewStringUTF:              extern fn(*mut JNIEnv, *const libc::c_char) -> jstring,
     pub GetStringUTFLength:                extern fn(*mut JNIEnv, jstring) -> jsize,
     pub GetStringUTFChars:             extern fn(*mut JNIEnv, jstring, *mut jboolean) -> *const libc::c_char,
     pub ReleaseStringUTFChars:             extern fn(*mut JNIEnv, jstring, *const libc::c_char),
     pub GetArrayLength:                extern fn(*mut JNIEnv, jarray) -> jsize,
     pub NewObjectArray:                extern fn(*mut JNIEnv, jsize, jclass, jobject) -> jobjectArray,
     pub GetObjectArrayElement:             extern fn(*mut JNIEnv, jobjectArray, jsize) -> jobject,
     pub SetObjectArrayElement:             extern fn(*mut JNIEnv, jobjectArray, jsize, jobject),
     pub NewBooleanArray:               extern fn(*mut JNIEnv, jsize) -> jbooleanArray,
     pub NewByteArray:              extern fn(*mut JNIEnv, jsize) -> jbyteArray,
     pub NewCharArray:              extern fn(*mut JNIEnv, jsize) -> jcharArray,
     pub NewShortArray:             extern fn(*mut JNIEnv, jsize) -> jshortArray,
     pub NewIntArray:               extern fn(*mut JNIEnv, jsize) -> jintArray,
     pub NewLongArray:              extern fn(*mut JNIEnv, jsize) -> jlongArray,
     pub NewFloatArray:             extern fn(*mut JNIEnv, jsize) -> jfloatArray,
     pub NewDoubleArray:                extern fn(*mut JNIEnv, jsize) -> jdoubleArray,
     pub GetBooleanArrayElements:               extern fn(*mut JNIEnv, jbooleanArray, *mut jboolean) -> *mut jboolean,
     pub GetByteArrayElements:              extern fn(*mut JNIEnv, jbyteArray, *mut jboolean) -> *mut jbyte,
     pub GetCharArrayElements:              extern fn(*mut JNIEnv, jcharArray, *mut jboolean) -> *mut jchar,
     pub GetShortArrayElements:             extern fn(*mut JNIEnv, jshortArray, *mut jboolean) -> *mut jshort,
     pub GetIntArrayElements:               extern fn(*mut JNIEnv, jintArray, *mut jboolean) -> *mut jint,
     pub GetLongArrayElements:              extern fn(*mut JNIEnv, jlongArray, *mut jboolean) -> *mut jlong,
     pub GetFloatArrayElements:             extern fn(*mut JNIEnv, jfloatArray, *mut jboolean) -> *mut jfloat,
     pub GetDoubleArrayElements:                extern fn(*mut JNIEnv, jdoubleArray, *mut jboolean) -> *mut jdouble,
     pub ReleaseBooleanArrayElements:               extern fn(*mut JNIEnv, jbooleanArray, *mut jboolean, jint),
     pub ReleaseByteArrayElements:              extern fn(*mut JNIEnv, jbyteArray, *mut jbyte, jint),
     pub ReleaseCharArrayElements:              extern fn(*mut JNIEnv, jcharArray, *mut jchar, jint),
     pub ReleaseShortArrayElements:             extern fn(*mut JNIEnv, jshortArray, *mut jshort, jint),
     pub ReleaseIntArrayElements:               extern fn(*mut JNIEnv, jintArray, *mut jint, jint),
     pub ReleaseLongArrayElements:              extern fn(*mut JNIEnv, jlongArray, *mut jlong, jint),
     pub ReleaseFloatArrayElements:             extern fn(*mut JNIEnv, jfloatArray, *mut jfloat, jint),
     pub ReleaseDoubleArrayElements:                extern fn(*mut JNIEnv, jdoubleArray, *mut jdouble, jint),
     pub GetBooleanArrayRegion:             extern fn(*mut JNIEnv, jbooleanArray, jsize, jsize, *mut jboolean),
     pub GetByteArrayRegion:                extern fn(*mut JNIEnv, jbyteArray, jsize, jsize, *mut jbyte),
     pub GetCharArrayRegion:                extern fn(*mut JNIEnv, jcharArray, jsize, jsize, *mut jchar),
     pub GetShortArrayRegion:               extern fn(*mut JNIEnv, jshortArray, jsize, jsize, *mut jshort),
     pub GetIntArrayRegion:             extern fn(*mut JNIEnv, jintArray, jsize, jsize, *mut jint),
     pub GetLongArrayRegion:                extern fn(*mut JNIEnv, jlongArray, jsize, jsize, *mut jlong),
     pub GetFloatArrayRegion:               extern fn(*mut JNIEnv, jfloatArray, jsize, jsize, *mut jfloat),
     pub GetDoubleArrayRegion:              extern fn(*mut JNIEnv, jdoubleArray, jsize, jsize, *mut jdouble),
     pub SetBooleanArrayRegion:             extern fn(*mut JNIEnv, jbooleanArray, jsize, jsize, *const jboolean),
     pub SetByteArrayRegion:                extern fn(*mut JNIEnv, jbyteArray, jsize, jsize, *const jbyte),
     pub SetCharArrayRegion:                extern fn(*mut JNIEnv, jcharArray, jsize, jsize, *const jchar),
     pub SetShortArrayRegion:               extern fn(*mut JNIEnv, jshortArray, jsize, jsize, *const jshort),
     pub SetIntArrayRegion:             extern fn(*mut JNIEnv, jintArray, jsize, jsize, *const jint),
     pub SetLongArrayRegion:                extern fn(*mut JNIEnv, jlongArray, jsize, jsize, *const jlong),
     pub SetFloatArrayRegion:               extern fn(*mut JNIEnv, jfloatArray, jsize, jsize, *const jfloat),
     pub SetDoubleArrayRegion:              extern fn(*mut JNIEnv, jdoubleArray, jsize, jsize, *const jdouble),
     pub RegisterNatives:               extern fn(*mut JNIEnv, jclass, *const JNINativeMethod, jint) -> jint,
     pub UnregisterNatives:             extern fn(*mut JNIEnv, jclass) -> jint,
     pub MonitorEnter:              extern fn(*mut JNIEnv, jobject) -> jint,
     pub MonitorExit:               extern fn(*mut JNIEnv, jobject) -> jint,
     pub GetJavaVM:             extern fn(*mut JNIEnv, *mut *mut JavaVM) -> jint,
     pub GetStringRegion:               extern fn(*mut JNIEnv, jstring, jsize, jsize, *mut jchar),
     pub GetStringUTFRegion:                extern fn(*mut JNIEnv, jstring, jsize, jsize, *mut libc::c_char),
     pub GetPrimitiveArrayCritical:             extern fn(*mut JNIEnv, jarray, *mut jboolean) -> *mut libc::c_void,
     pub ReleasePrimitiveArrayCritical:             extern fn(*mut JNIEnv, jarray, *mut libc::c_void, jint),
     pub GetStringCritical:             extern fn(*mut JNIEnv, jstring, *mut jboolean) -> *const jchar,
     pub ReleaseStringCritical:             extern fn(*mut JNIEnv, jstring, *const jchar),
     pub NewWeakGlobalRef:              extern fn(*mut JNIEnv, jobject) -> jweak,
     pub DeleteWeakGlobalRef:               extern fn(*mut JNIEnv, jweak),
     pub ExceptionCheck:                extern fn(*mut JNIEnv) -> jboolean,
     pub NewDirectByteBuffer:               extern fn(*mut JNIEnv, *mut libc::c_void, jlong) -> jobject,
     pub GetDirectBufferAddress:                extern fn(*mut JNIEnv, jobject) -> *mut libc::c_void,
     pub GetDirectBufferCapacity:               extern fn(*mut JNIEnv, jobject) -> jlong,
     pub GetObjectRefType:              extern fn(*mut JNIEnv, jobject) -> jobjectRefType,
}
#[repr(C)]
pub struct JNINativeMethod {
     pub name:              *const libc::c_char,
     pub signature:             *const libc::c_char,
     pub fnPtr:             *mut libc::c_void,
}
pub const JNIWeakGlobalRefType: libc::int32_t = 3;
extern { pub fn JNI_OnLoad(vm: *mut JavaVM, reserved: *mut libc::c_void) -> jint; }
extern { pub fn JNI_OnUnload(vm: *mut JavaVM, reserved: *mut libc::c_void); }
pub type JavaVM = _JavaVM;
#[repr(C)]
pub struct JavaVMAttachArgs {
     pub version:               jint,
     pub name:              *const libc::c_char,
     pub group:             jobject,
}
#[repr(C)]
pub struct JavaVMInitArgs {
     pub version:               jint,
     pub nOptions:              jint,
     pub options:               *mut JavaVMOption,
     pub ignoreUnrecognized:                jboolean,
}
#[repr(C)]
pub struct JavaVMOption {
     pub optionString:              *const libc::c_char,
     pub extraInfo:             *mut libc::c_void,
}
#[repr(C)]
pub struct _JNIEnv {
     pub functions:             *const JNINativeInterface,
}
#[repr(C)]
pub struct _JavaVM {
     pub functions:             *const JNIInvokeInterface,
}
// CLASS
pub type class__jarray = ();
// CLASS
pub type class__jbooleanArray = ();
// CLASS
pub type class__jbyteArray = ();
// CLASS
pub type class__jcharArray = ();
// CLASS
pub type class__jclass = ();
// CLASS
pub type class__jdoubleArray = ();
pub type _jfieldID = ();
// CLASS
pub type class__jfloatArray = ();
// CLASS
pub type class__jintArray = ();
// CLASS
pub type class__jlongArray = ();
pub type _jmethodID = ();
// CLASS
pub type class__jobject = ();
// CLASS
pub type class__jobjectArray = ();
// CLASS
pub type class__jshortArray = ();
// CLASS
pub type class__jstring = ();
// CLASS
pub type class__jthrowable = ();
pub type jarray = *mut class__jarray;
pub type jboolean = libc::c_uchar;
pub type jbooleanArray = *mut class__jbooleanArray;
pub type jbyte = libc::c_schar;
pub type jbyteArray = *mut class__jbyteArray;
pub type jchar = libc::c_ushort;
pub type jcharArray = *mut class__jcharArray;
pub type jclass = *mut class__jclass;
pub type jdouble = libc::c_double;
pub type jdoubleArray = *mut class__jdoubleArray;
pub type jfieldID = *mut _jfieldID;
pub type jfloat = libc::c_float;
pub type jfloatArray = *mut class__jfloatArray;
pub type jint = libc::c_int;
pub type jintArray = *mut class__jintArray;
pub type jlong = libc::c_longlong;
pub type jlongArray = *mut class__jlongArray;
pub type jmethodID = *mut _jmethodID;
pub type jobject = *mut class__jobject;
pub type jobjectArray = *mut class__jobjectArray;
pub type jobjectRefType = i32;
pub type jshort = libc::c_short;
pub type jshortArray = *mut class__jshortArray;
pub type jsize = jint;
pub type jstring = *mut class__jstring;
pub type jthrowable = *mut class__jthrowable;
pub type jvalue = [u8; 8];
pub type jweak = *mut class__jobject;